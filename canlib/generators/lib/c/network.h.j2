#ifndef {{ network.name }}_NETWORK_H
#define {{ network.name }}_NETWORK_H

#include <stdbool.h>
#include <assert.h>
#include <stdint.h>
#include <string.h>
#include <stdio.h>

#ifndef CANLIB_ASSERTS
#define CANLIB_ASSERTS

static_assert(sizeof(float) == 4, "sizeof(float) != 4 BYTES");
static_assert(sizeof(double) == 8, "sizeof(double) != 8 BYTES");

#endif // CANLIB_ASSERTS

#ifndef CANLIB_SHARED
#define CANLIB_SHARED

#if defined(__MINGW32__)
#define __CANLIB_PACKED __attribute__((__gcc_struct__, __packed__)) // , __aligned__(1)))
#else
#define __CANLIB_PACKED __attribute__((__packed__)) // , __aligned__(1)))
#endif

#endif // CANLIB_SHARED

#ifndef CANLIB_SEPARATOR
#define CANLIB_SEPARATOR ,
#endif // CANLIB_SEPARATOR


#define {{ network.name }}_int8 int8_t
#define {{ network.name }}_uint8 uint8_t
#define {{ network.name }}_int16 int16_t
#define {{ network.name }}_uint16 uint16_t
#define {{ network.name }}_int32 int32_t
#define {{ network.name }}_uint32 uint32_t
#define {{ network.name }}_int64 int64_t
#define {{ network.name }}_uint64 uint64_t
#define {{ network.name }}_float float
#define {{ network.name }}_double double
#define {{ network.name }}_bool bool

// Frequencies
{% for message in schema.messages %}
#define {{ network.name }}_{{ message.name }}_FREQUENCY {{ message.frequency }}
{%- endfor %}

// Sizes
{% for message in schema.messages %}
#define {{ network.name }}_{{ message.name }}_SIZE {{ message.size }}
{%- endfor %}

// Bitsets
{% for bit_set in schema.bit_sets %}
typedef uint8_t {{ network.name }}_{{ bit_set.name }}[{{ bit_set.byte_size }}];
#define {{ network.name }}_{{ bit_set.name }}_DEFAULT { {{ ", ".join(["0"] * bit_set.byte_size) }} }
{%- for name in bit_set.items %}
#define {{ network.name }}_{{ bit_set.name }}_{{ name }} {{ loop.index }}
{%- endfor %}
{% endfor %}

// Enums
{% for enum in schema.enums %}
typedef enum __CANLIB_PACKED {
    {%- for name in enum.items %}
    {{ enum.name }}_{{ name }} = {{ loop.index }},
    {%- endfor %}
} {{ network.name }}_{{ enum.name }};
{% endfor %}

// Structs
{% for message in schema.messages %}
typedef struct __CANLIB_PACKED {
    {%- for field in message.fields %}
    {{ network.name }}_{{ field.type.name }} {{ field.name }};
    {%- endfor %}
} {{ network.name }}_{{ message.name }}_MSG;
{% endfor %}

// Strings

{% for message in schema.messages %}
void {{ network.name }}_{{ message.name }}_to_string({{ network.name }}_{{ message.name }}_MSG* message, char* buffer) {
    sprintf(
        buffer,
{%- for field in message.fields %}
        "{{ field.type.format_string }}"{% if not loop.last %} CANLIB_SEPARATOR {% endif -%}
{%- endfor %},
{%- for field in message.fields %}
        message->{{ field.name }}{%- if not loop.last %},{%- endif -%}
{%- endfor %}
    );
}

void {{ network.name }}_{{ message.name }}_fields(char* buffer) {
    sprintf(
        buffer,
{%- for field in message.fields %}
        "{{ field.name }}"{% if not loop.last %} CANLIB_SEPARATOR {% endif -%}
{%- endfor %}
    );
}

void {{ network.name }}_{{ message.name }}_to_string_file({{ network.name }}_{{ message.name }}_MSG* message, FILE* buffer) {
    fprintf(
        buffer,
{%- for field in message.fields %}
        "{{ field.type.format_string }}"{% if not loop.last %} CANLIB_SEPARATOR {% endif -%}
{%- endfor %},
{%- for field in message.fields %}
        message->{{ field.name }}{%- if not loop.last %},{%- endif -%}
{%- endfor %}
    );
}

void {{ network.name }}_{{ message.name }}_fields_file(FILE* buffer) {
    fprintf(
        buffer,
{%- for field in message.fields %}
        "{{ field.name }}"{% if not loop.last %} CANLIB_SEPARATOR {% endif -%}
{%- endfor %}
    );
}
{% endfor %}

#endif // {{ network.name }}_NETWORK_H
