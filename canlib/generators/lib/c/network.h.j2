#ifndef {{ network.name }}_NETWORK_H
#define {{ network.name }}_NETWORK_H

#include <stdbool.h>
#include <assert.h>
#include <stdint.h>
#include <string.h>
#include <stdio.h>

#ifndef CANLIB_ASSERTS
#define CANLIB_ASSERTS

static_assert(sizeof(float) == 4, "sizeof(float) != 4 BYTES");
static_assert(sizeof(double) == 8, "sizeof(double) != 8 BYTES");

#endif // CANLIB_ASSERTS

#ifndef CANLIB_SHARED
#define CANLIB_SHARED

#if defined(__MINGW32__)
#define __CANLIB_PACKED __attribute__((__gcc_struct__, __packed__)) // , __aligned__(1)))
#else
#define __CANLIB_PACKED __attribute__((__packed__)) // , __aligned__(1)))
#endif

#define CANLIB_BITMASK(b) (1 << (b))
#define CANLIB_BITSET(a, b) ((a) |= CANLIB_BITMASK(b))
#define CANLIB_BITCLEAR(a, b) ((a) &= ~CANLIB_BITMASK(b))
#define CANLIB_BITTEST(a, b) ((a) & CANLIB_BITMASK(b))

#endif // CANLIB_SHARED

#ifndef CANLIB_SEPARATOR
#define CANLIB_SEPARATOR ","
#endif // CANLIB_SEPARATOR

#define {{ network.name }}_int8 int8_t
#define {{ network.name }}_uint8 uint8_t
#define {{ network.name }}_int16 int16_t
#define {{ network.name }}_uint16 uint16_t
#define {{ network.name }}_int32 int32_t
#define {{ network.name }}_uint32 uint32_t
#define {{ network.name }}_int64 int64_t
#define {{ network.name }}_uint64 uint64_t
#define {{ network.name }}_float32 float
#define {{ network.name }}_float64 double
#define {{ network.name }}_bool bool

typedef union {
    uint8_t bytes[4];
    {{ network.name }}_float32 value;
} {{ network.name }}_float32_helper;

typedef union {
    uint8_t bytes[8];
    {{ network.name }}_float64 value;
} {{ network.name }}_float64_helper;

// Frequencies

{% for message in schema.messages %}
#define {{ network.name }}_{{ message.name }}_FREQUENCY {{ message.frequency }}
{%- endfor %}

// Sizes

{% for message in schema.messages %}
#define {{ network.name }}_{{ message.name }}_SIZE {{ message.size }}
{%- endfor %}

// Bitsets

{% for bit_set in schema.bit_sets %}
typedef {{ network.name }}_{{ bit_set.base_type.name }} {{ network.name }}_{{ bit_set.name }};
#define {{ network.name }}_{{ bit_set.name }}_DEFAULT 0
{%- for name in bit_set.items %}
#define {{ network.name }}_{{ bit_set.name }}_{{ name }} {{ loop.index0 }}
{%- endfor %}
{% endfor %}

// Enums

{% for enum in schema.enums %}
typedef enum __CANLIB_PACKED {
    {%- for name in enum.items %}
    {{ enum.name }}_{{ name }} = {{ loop.index0 }},
    {%- endfor %}
} {{ network.name }}_{{ enum.name }};
{% endfor %}

// Structs

{% for message in schema.messages %}
typedef struct __CANLIB_PACKED {
    {%- for field in message.fields %}
    {{ network.name }}_{{ field.type.name }} {{ field.name }};
    {%- endfor %}
} {{ network.name }}_message_{{ message.name }};
{% endfor %}

// Serialize and Deserialize

{% for message in schema.messages %}
void {{ network.name }}_serialize_{{ message.name }}(
    uint8_t* data{% if message.fields %},{% endif %}
{%- for field in message.fields %}
    {{ network.name }}_{{ field.type.name }} {{ field.name }}{% if not loop.last %},{% endif -%}
{%- endfor %}
) {
{%- for index, fields in message.alignment.items() -%}
{%- for field in serialize(network, fields) %}
    data[{{ index + loop.index0 }}] = {{ field }};
{%- endfor %}
{%- endfor %}
}

void {{ network.name }}_deserialize_{{ message.name }}({{ network.name }}_message_{{ message.name }}* message, uint8_t* data) {
{%- for index, fields in message.alignment.items() -%}
{%- for name, field in deserialize(network, index, fields).items() %}
    message->{{ name }} = {{ field }};
{%- endfor %}
{%- endfor %}
}
{% endfor %}

// Strings

{% for message in schema.messages %}
void {{ network.name }}_to_string_{{ message.name }}({{ network.name }}_message_{{ message.name }}* message, char* buffer) {
{%- if message.fields  %}
    sprintf(
        buffer,
        {%- for field in message.fields %}
        "{{ field.type.format_string }}"{% if not loop.last %} CANLIB_SEPARATOR {% endif -%}
        {%- endfor %},
        {%- for field in message.fields %}
        message->{{ field.name }}{%- if not loop.last %},{%- endif -%}
        {%- endfor %}
    );
{% endif -%}
}

void {{ network.name }}_fields_{{ message.name }}(char* buffer) {
{%- if message.fields  %}
    sprintf(
        buffer,
        {%- for field in message.fields %}
        "{{ field.name }}"{% if not loop.last %} CANLIB_SEPARATOR {% endif -%}
        {%- endfor %}
    );
{% endif -%}
}

void {{ network.name }}_to_string_file_{{ message.name }}({{ network.name }}_message_{{ message.name }}* message, FILE* buffer) {
{%- if message.fields  %}
    fprintf(
        buffer,
        {%- for field in message.fields %}
        "{{ field.type.format_string }}"{% if not loop.last %} CANLIB_SEPARATOR {% endif -%}
        {%- endfor %},
        {%- for field in message.fields %}
        message->{{ field.name }}{%- if not loop.last %},{%- endif -%}
        {%- endfor %}
    );
{% endif -%}
}

void {{ network.name }}_fields_file_{{ message.name }}(FILE* buffer) {
{%- if message.fields  %}
    fprintf(
        buffer,
        {%- for field in message.fields %}
        "{{ field.name }}"{% if not loop.last %} CANLIB_SEPARATOR {% endif -%}
        {%- endfor %}
    );
{% endif -%}
}
{% endfor %}

#endif // {{ network.name }}_NETWORK_H
