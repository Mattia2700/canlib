#include <string.h>
#include <stdint.h>
#include <stdio.h>
#include "{{ network.name }}.h"

#define CAN_MESSAGE_NAME_MAX_LENGTH {{ msg_name_max_length }}

void {{ network.name }}_msgname_from_id(uint32_t msg_id, char *buffer) {
    /*
    *       Returns a string containing the name of the message having the specified id
    *           Parameters:
    *               msg_id: the id of the message
    *               buffer: the pre allocated buffer where the message name will be returned
    */
    switch (msg_id) {
{%- for message_name, message in network.messages.items() %}
        case {{ message.id }}: strcpy(buffer, "{{ message_name }}"); break;
{%- endfor %}
        default:
            strcpy(buffer, ""); // Unknown message
    }
}

{% for message in schema.messages %}
void {{utils.to_camel_case(message.name,"_")}}ToString({{utils.to_camel_case(message.name,"_")}}Msg* in, char* buff, char separator)
{
  sprintf(buff,
    "
  {%-for i, field in enumerate(printf_cast(message.fields))-%}
  {{field-}}%c
  {%-endfor-%}
  \n",{{" "}}
  {%-for i, field in enumerate(message.fields)-%}
  {%-if not i == len(message.fields)-1 %}
    in->{{field.name}}, separator,{{" "}}
  {%-else %}
    in->{{field.name}}, separator
  {%-endif-%}
  {%-endfor %}
  );
}
void {{utils.to_camel_case(message.name,"_")}}Header({{utils.to_camel_case(message.name,"_")}}Msg* in, char* buff, char separator)
{
  sprintf(buff,
   "
  {%-for i, field in enumerate(message.fields)-%}
  {%-if not i == len(message.fields)-1 -%}
  {{field.name}}%c
  {%-else-%}
  {{field.name}}%c
  {%-endif-%}
  {%-endfor-%}
  \n"
    {%for i, field in enumerate(message.fields)-%}
    ,separator
    {%endfor %});
}
void {{utils.to_camel_case(message.name,"_")}}ToStringFile({{utils.to_camel_case(message.name,"_")}}Msg* in, FILE* buff, char separator)
{
  fprintf(buff,
    "
  {%-for i, field in enumerate(printf_cast(message.fields))-%}
  {{field-}}%c
  {%-endfor-%}
  \n",{{" "}}
  {%-for i, field in enumerate(message.fields)-%}
  {%-if not i == len(message.fields)-1 %}
    in->{{field.name}}, separator,{{" "}}
  {%-else %}
    in->{{field.name}}, separator
  {%-endif-%}
  {%-endfor %}
  );
}
void {{utils.to_camel_case(message.name,"_")}}HeaderFile({{utils.to_camel_case(message.name,"_")}}Msg* in, FILE* buff, char separator)
{
  fprintf(buff,
    "
    {%-for i, field in enumerate(message.fields)-%}
      {%-if not i == len(message.fields)-1 -%}
        {{field.name}}%c
      {%-else-%}
        {{field.name}}%c
      {%-endif-%}
    {%-endfor-%}
    \n"
    {%for i, field in enumerate(message.fields)-%}
    ,separator
    {%endfor-%}
  );
}

{% endfor %}
