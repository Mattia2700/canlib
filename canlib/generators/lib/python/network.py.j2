from enum import IntEnum, IntFlag
from struct import pack, unpack
from typing import Any

def int8(value: Any) -> int:
    return int(value)

def uint8(value: Any) -> int:
    return int(value)

def int16(value: Any) -> int:
    return int(value)

def uint16(value: Any) -> int:
    return int(value)

def int32(value: Any) -> int:
    return int(value)

def uint32(value: Any) -> int:
    return int(value)

def int64(value: Any) -> int:
    return int(value)

def uint64(value: Any) -> int:
    return int(value)

def float32(value: Any) -> float:
    return float(value)

def float64(value: Any) -> float:
    return float(value)

def bool(value: Any) -> bool:
    return bool(value)


# Bitsets

{% for bit_set in schema.bit_sets -%}
class {{ bit_set.name }}(IntFlag):
{%- if bit_set.items %}
{%- for name in bit_set.items %}
    {{ name }} = {{ 2**loop.index0 }}
{%- endfor %}
{%- else %}
    pass
{%- endif %}

{% endfor -%}

# Enums

{% for enum in schema.enums -%}
class {{ enum.name }}(IntEnum):
{%- for name in enum.items %}
    {{ name }} = {{ loop.index0 }}
{%- endfor %}

{% endfor -%}

# Messages

{% for message in schema.messages %}
class message_{{ message.name }}:
    def __init__(
        self{% if message.fields %},{% endif %}
{%- for field in message.fields %}
        {{ field.name }}{% if not loop.last %},{% endif -%}
{%- endfor %}
    ):
    {%- if message.fields %}
        {%- for field in message.fields %}
        self.{{ field.name }} = {{ field.type.name }}({{ field.name }}) if {{ field.name }} is not None else None
        {%- endfor %}
    {%- endif %}
        self.size = {{ message.size }}
    {%- if message.frequency != -1 %}
        self.millis = {{ message.frequency }}
    {%- endif %}

    def serialize(self):
        data = bytearray()
        data.extend({{ serialize(network, message) }})
        return data

    def deserialize(self, data):
    {%- if message.fields -%}
    {%- for name, field in deserialize(network, message).items() %}
        self.{{ name }} = {{ field }}
    {%- endfor -%}
    {%- else %}
        pass
    {%- endif %}

    def __eq__(self, other):
        if not isinstance(other, message_{{ message.name }}):
            return False
        {%- for field in message.fields %}
        if self.{{ field.name }} != other.{{ field.name }}:
            return False
        {%- endfor %}
        return True

{% endfor -%}
